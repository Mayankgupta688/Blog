@html.extend('layout', function(model) {

  @html.block("header", function(model) {
    <title>JavaScript Function Chaining</title>
    <meta name="title" content="Function Chaining in JavaScript" />
    <meta name="description" content="Function Chaining can be achieved in JavaScript. Function can return "this" (Current Context) back from the function call />
    <meta name="keywords" content="JavaScript Function Chaining, Returning Function Context, Function Chaining in JavaScript"/>
    <link rel="canonical" href="http://learn-javascript.in/javascript-function-chaining-jquery-chaining" />
  });



  @html.block("body", function(model) {
    <div>
      <div class="blog-post-content">








      <h1>Function Chaining</h1>
<p><strong>The intend of the Article is to:</strong></p>
<p>1. Understand Function Chaining</p>
<p>2. Achieve function chaining in JavaScript</p>
<p>&nbsp;</p>
<p>Function Chaining is a pattern in JavaScript where we can call multiple function on a same object consecutively.</p>
<p>It allows multiple commands to run one after other on same element.</p>
<p>Function Chaining increases readibility of the code and also less redundency.</p><br>
<h2>JQuery Function Chaining</h2>
<p>Lets work on the following requirement:</p>
<p>1. Select a &quot;div&quot; in HTML</p>
<p>2. Change its color to Red</p>
<p>3. Add Height to the Element to 100px</p>
<p>4. Add Width to the Element</p>
<p>&nbsp;</p>
<p>Conventionally this can be achieved by following way:</p>
<pre>
<code class="lang-javascript">
var selectedDiv = $(&quot;#myDiv&quot;);

selectedDiv.css(&#39;color: red&#39;)

selectedDiv.height(&#39;100px&#39;)

selectedDiv.width(&#39;100px&#39;)</code></pre>
<p>But since JQuery supports Function Chaining.&nbsp;</p>
<p>The above specified functionality can be achieved efficiently by Chaining:</p>
<pre>
<code class="lang-javascript">
var selectedDiv = $(&quot;#myDiv&quot;);

selectedDiv.css(&#39;color: red&#39;).height(&#39;100px&#39;).width(&#39;100px&#39;);
</code></pre>
<p>Jquery&nbsp;return us Object on which it executes the function back after each execution.</p>
<p>After executing each command the current Context is returned, hence enabling Function Chaining.</p>
<pre>
<code class="lang-javascript">
var mainDiv = $(&quot;#selectedDiv&quot;);

var selectedDiv = selectedDiv.css(&#39;color: red&#39;)

// Here the Object returned from JQuery Function is same as &quot;mainDiv&quot;

console(mainDiv == selectedDiv)    // returns true;
</code></pre>
<p><strong>JQuery is able to achive the functionality because of following reason:</strong></p>
<p>1. JQuery returns the same Object back, on which it executes once it is completed</p>
<p>2. The returned element from the function can then operate on another function.</p>
<p>&nbsp;</p>
<h2>Achieving Chaining In JavaScript</h2>
<p>We can achieve Function Chaining&nbsp;by returning the current Object back from the Executing Function.</p>
<p>The current Executing Context is returned can be returned from the previous function and act as a Context for next function to be executed. Since the context is the same Object on which previous function was executed, we can achieve chaining functionality.</p>
<p>&nbsp;</p>
<b>Lets consider following requirement and Implement Chaining on it.</b>
<p>1. Create a Variable &quot;Obj&quot; containing a variable &quot;output&quot;.</p>
<p>2. Write a function to add 2 variable and assign to &quot;output&quot;</p>
<p>3. Multiply the &quot;output&quot; by &quot;10&quot;</p>
<p>4. Substract 20 from it and display the result.</p>
<p>&nbsp;</p>
<pre>
<code class="lang-javascript">
var Obj = {

  result: 0,

  addNumber(a, b) { this.result = a + b; }

};

Obj.addNumber(10, 20);

console.log(Obj.result);

</code></pre>

<p>Once the &quot;addNumber&quot; function is executed, we want to chain &quot;multiplyNumber&quot; functionality.</p>
<pre>
<code class="lang-javascript">
// Our requirement is to chain the &quot;multiplyNumber&quot; function with &quot;addNumber&quot;

Obj.addNumber(10, 20).multiplyNumber(10);</code></pre>

<p>On order to achieve the required functionality, we need to return the &quot;Object Reference&quot; from &quot;addNumber&quot;</p>
<p>Lets try to return &quot;<strong>Current Object Reference</strong>&quot; from &quot;addNumber&quot; function</p>
<pre>
<code class="lang-javascript">

var Obj = {

  result: 0,

&nbsp; addNumber: function(a, b) {
&nbsp;  
&nbsp;   this.result = a + b; 

    return this;

&nbsp; },

  multiplyNumber: function(a) {
&nbsp;
&nbsp;   this.result = this.result * a;

    return this;

&nbsp; } 

};

Obj.addNumber(10, 20).multiplyNumber(10)

console.log(Obj.result)</code></pre>
<p>&nbsp;</p>
<p><strong>Lets just drill into what exactly the above code is doing</strong></p><br>

<p>"addNumber" was executed on "Obj", therefore context of "addNumber" is set to "Obj"</p>
<p>Since the context of "addNumber" is set to "Obj", "this" keyword inside the function would point to "Obj"</p>
<p>Once the "addNumber" function is finished executed, it returns the current context on which it executes.</b><br>
<p>"multiplyNumber" would execute on the same context, and "this" inside "multiplyNumber" would refer to same Object.</p><br>


<p><b>The last 2 lines of code is Equivalent to:</b></p>
<pre>
<code class="lang-javascript">
var element = Obj.addNumber(10, 20)

element.multiplyNumber(10);

console.log(Obj == element) // returns true</code></pre>
<p><strong>The code, can be summarized as:</strong></p>
<p>1. &quot;addNumber&quot; operated on &quot;Obj&quot; Object</p>
<p>2. On adding the 2 Number, it returns &quot;this&quot; which represent the current Context</p>
<p>3. This Context Represents &quot;Obj&quot; which is then used to invoke &quot;multiplyNumber&quot; function.</p>
<p>4. Passing the Object reference ensures that the functions executes on same Context / Object</p>
<p>5. Hence we can achieve &quot;Function Chaining&quot;</p>
<p>&nbsp;</p>
<p>Now lets complete the Intended functionality:</p>

<pre>
<code class="lang-javascript">

var Obj = {

  result: 0,

&nbsp; addNumber: function(a, b) {
&nbsp;
&nbsp;   this.result = a + b;

    return this;

&nbsp; },

  multiplyNumber: function(a) {
&nbsp;
&nbsp;   this.result = this.result * a;

    return this;

&nbsp; },
&nbsp;
&nbsp; divideNumber: function(a) {
&nbsp;
&nbsp;   this.result = this.result / a;

&nbsp;   return this;

  }

}

Obj.addNumber(10, 20).multiplyNumber(10).divideNumber(10)
</code></pre>
<p>This is how we have achieves <strong>&quot;Function Chaining&quot;</strong></p>
<p>&nbsp;</p>
<p><strong>Each of the Function in &quot;Function Chaining&quot; returns the current &quot;Execution Context&quot;</strong></p>
<p><strong>Hence enabling the chained function to Operate on the same Context and achieve Chaining</strong></p>
<p>​​​​​​​</p>









        
      </div>
    </div>
  })
})