@html.extend('layout', function(model) {


  @html.block("header", function(model) {
    <meta content="Scopes in JavaScript" name="title" />
    <title>Understanding Scopes in JavaScipt</title>
    <meta name="description" content="Understand Scopes in JavaScipts" />
    <meta name="keywords" content="Functional Scopes, Lexical Scope, Scope in JavaScipt, JavaScript Scope, Global Scope, Function Scope, Scoping in JavaScript,toddmotto.com/everything-you-wanted-to-know-about-javascript-scope/"/>
  });



  @html.block("body", function(model) {

    <div class="blog-post-content">
  <h2><b>Scopes in JavaScript</b></h2>
  <div> </div>
  <div>It is important to understand the concept of scopes in JavaScript.</div>
  <div> </div>
  <div>Scope help us determine the availibility and accessibility of variable. </div>
  <div> </div>
  <p>There are basically 2 different scopes in JavaScipt:</p>
  <p>1. Global Scope </p>
  <p>2. Function Scope</p>
  <p><br></p>
  <h3><b>Variable Declaration and Definition</b></h3>
  <p>Lets first understand the concept of <b>Function Declaration and Function Definition</b></p>
  <p><br></p>
  <h5><b>1. var Name;</b></h5>
  <p>This is a simple variable Declaration. Function is simply Declared here.</p>
  <p>Here we can see that no value is assigned to the variable, therefore its a simple Declaration</p>
  <p>The initial value of variable is taken as "undefined"</p>
  <p><br></p>
  <h5><b>2. Name = "Mayank"</b></h5>
  <p>This is a variable definition, Variable is defined with a value.</p>
  <p>Assigning value to a variable is called as Variable Declaration. </p>
  <p>Variable was initially containing "undefined", now value changed to "Mayank</p>
  <p><br></p>
  <h5><b>3. var Name = "Mayank"</b></h5>
  <p>In this case we can see that the declaration and the definitionis given in the same line.</p>
  <p>This is the tricky Part, JavaScript implicitely break it into the following Code:</p>
  <h5>var Name;</h5>
  <h5>Name = "Mayank"</h5>
  <p><br></p>
  <p>This is the simple explaination of Function Definition and Declaration.</p>
  <p>For now this is enough for understanding the article.</p>
  <p><br></p>
  <h3><b>How Scopes are Determined in JavaScript</b></h3>
  <p>When JavaScript executes the code, it does the following</p>
  <p>1. It traverse accross the code to find the Variable Declarations.</p>
  <p>2. On the basis of where the variable is declared, variable scope is defined.</p>
  <p>3. JavaScript then start Executing the Code with prior knoledge about the scopes.</p>
  <p><br></p>
  <h3><b>Different Scopes in JavaScript</b></h3>
  <h5><b>Global Scope Variables:</b></h5>
  <p>Any variable which is declared outside a function definition is a <b>Global Scope Variable</b>. </p>
  <p>These variables can be accessed and modified throughtout the program.</p>
  <p><br></p>
  <p>var Name = "Mayank"</p>
  <p>var Age = 28;</p>
  <p><br></p>
  <p>Since these 2 variables are not defined inside any function, it is assigned to the Global Scope</p>
  <p>JavaScript while initial traversing, will add these variable to the Global Scope.</p>
  <p>Adding the variables to the global Scope shall allow them to be accessed anywhere.</p>
  <p><br></p>
  <h5><b>Function Scope Variable</b></h5>
  <p>Whereas the variables that are declared inside a function are <b>Function Scope Variable</b>.</p>
  <p>These Function Scope variables are destroyed as soon as function is executed.</p>
  <p><br></p>
  <p>function showDetails() {</p>
  <p>  var Name = "Mayank";</p>
  <p>  var Age = 28;</p>
  <p>}</p>
  <p>Here in the above code, we can see that the variables are declared inside the Function.</p>
  <p>Variables declared inside the functions are assigned with the function Scope</p>
  <p>Function scope variables cannot be accessed outside the function definition.</p>
  <p>Variable "Name" and &Auml;ge"cannot be accessed outside the "showDetails" function</p>
  <p><br></p>
  <p>function showDetails() {</p>
  <p>  var Name = "Mayank";</p>
  <p>  var Age = 28;</p>
  <p>}</p>
  <p>console.log(Name);</p>
  <p><br></p>
  <p>The above code shall result in error, since "Name" is not available outside the "showDetails"function</p>
  <p><br></p>
  <p>We can refer to Global scope Variable inside the Function Scope</p>
  <p>var Name = "Mayank"</p>
  <p>function showDetails() {</p>
  <p>  console.log(Name)</p>
  <p>}</p>
  <p>In the above code "Name" is assigned to the Global Scope therefore it can be accessed inside the Function</p>
  <p><br></p>
  <p>Also Consider the following Case:</p>
  <p>var Name = "Mayank</p>
  <p>function showDetails() {</p>
  <p>  Age = 28;</p>
  <p>}</p>
  <p>console.log(Age);</p>
  <p>In the above code, we cannot see the declaration of the &Auml;ge"variable in the Global Scope. </p>
  <p>This variable is Defined inside the Function, without "var"keyword</p>
  <p>Such Variables are assigned to the Global Scope.</p>
  <p><br></p>
  <h5>How Scopes are defined in JavaScript</h5>
  <p><br></p>
  <p>Compiler traverse the Entire JavaScript before execution.</p>
  <p>Before actual Run the scope of Variables are defined.</p>
  <p>While Execution of JavaScript Code, compiler has prior information about  variable Scopes.</p>
  <p><br></p>
  <p>The following operations are done when a JavaScript is Executed:</p>
  <p>1. Before Executing a JavaScript, it first looks for all the variable declarations.</p>
  <p>2. JavaScript compler evaluates the entire code and look for all the Declarations.</p>
  <p>3. On thebasis of where the Variable is Declared, scope is assigned to the variable.</p>
  <p>4. If variable is declared inside the Function, it is added to the Function Scope</p>
  <p>5. If the Variable is not defined inside the Function, it is assigned to the GLobal Scope.</p>
  <p><br></p>
  <p><b>** Note: </b></p>
  <p>Any variable if not declared in Global Scope and provide the definition directly inside a function, the variable is added to the Global Scope by the Compiler. This is demonstrated in the last Example provided.</p>
</div>

  });

});