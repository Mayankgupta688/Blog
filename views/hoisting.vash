<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="robots" content="index, follow">

    <title>Function Hoisting and Variable Hoisting JavaScript</title>

    <meta name="title" content="Function Hoisting and Variable Hoisting JavaScript" />

    <meta name="description" content="Functions and Variables are Hoisted in JavaScript. Variable and Function Hoisting enables the user to access variable before its Initialization." />

    <meta name="keywords" content="Hoisting, JavaScript Hoisting, Function Hoisting, Variable Hoisting, Hoisting in JavaScript, JavaScript Hoisting, Hoisting Concepts, Variable Declaration, variable Definition, Function Expressions, Function Declaration, Expression in JavaScript, Expressions, Function Expression"/>

    <link rel="stylesheet" href="css/shrink.css">
    <link rel="stylesheet" href="css/app.css">
    <script src="js/rainbow.js"></script>
    <meta name="msvalidate.01" content="F77C0434F58CEA255020E3CCDE1B58D6" />
    <link href="//maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css" rel="stylesheet">

  </head>
  <body>
    <!-- Search -->
    <div class="search-overlay"></div>
    <div class="search">
      <a href="" class="search-close"><i class="md md-close"></i></a>
      <div class="row">
        <div class="col-sm-6 col-sm-offset-3">
          <h4>Just Start Typing Text and Press Enter</h4>
          <form class="search-form">
            <input type="text" id="search" name="search" class="text-center" />
          </form>
          <!-- end .search-form -->
        </div>
        <!-- end .col-sm-6 -->
      </div>
      <!-- end .row -->
    </div>
    <!-- end .row -->
    <!-- Slide Out -->
    <div class="slide-out-overlay"></div>
    <div class="slide-out">
      <header class="slide-out-header clearfix">
        <div class="clearfix">
          <a href="" class="slide-out-close pull-left"><i class="md md-close"></i></a>
          <a href="" class="open-search pull-right"><i class="md md-search"></i></a>
          <a href="" class="slide-out-share pull-right"><i class="md md-more-vert"></i></a>
        </div>
        <!-- end .clearfix -->
        <!-- Popup -->
        <div class="slide-out-popup">
          <nav class="social-nav">
            <ul class="list-unstyled">
              <li><a href="">Facebook</a></li>
              <li><a href="">Twitter</a></li>
              <li><a href="">Linkedin</a></li>
              <li><a href="">Google+</a></li>
              <li><a href="">Behance</a></li>
            </ul>
            <!-- end .list-unstyled -->
          </nav>
          <!-- end .social-nav -->
        </div>
        <!-- end .slide-out-popup -->
        <div class="image"><img src="" alt="alt text" class="img-responsive"></div>
        <div class="content">
          <h5>Benjamin Thomson</h5>
          <span>Web & UX Designer</span>
        </div>
        <!-- end .content -->
        <div class="text-right">
          <a href="" class="button link-button white icon-left"><i class="md md-file-download"></i>Download Resume</a>
        </div>
        <!-- end .text-right -->
      </header>
      <!-- end .slide-out-header -->
      <div class="slide-out-widgets">
        <div class="slide-out-widget">
          <h4>Drink A Coffee With Me Today</h4>
          <form action="scripts/contact.php" method="post" class="form-horizontal contact-form">
            <div class="form-group">
              <label class="col-sm-3 control-label">Name</label>
              <div class="col-sm-9">
                <input type="text" class="contact-name" name="contact-name" />
              </div>
              <!-- end .col-sm-9 -->
            </div>
            <!-- end .form-group -->
            <div class="form-group">
              <label class="col-sm-3 control-label">Email</label>
              <div class="col-sm-9">
                <input type="email" class="contact-email" name="contact-email" />
              </div>
              <!-- end .col-sm-9 -->
            </div>
            <!-- end .form-group -->
            <div class="form-group">
              <label class="col-sm-3 control-label">Message</label>
              <div class="col-sm-9">
                <textarea name="contact-message" class="contact-message" rows="3"></textarea>
              </div>
              <!-- end .col-sm-9 -->
            </div>
            <!-- end .form-group -->
            <div class="form-group">
              <div class="col-sm-9 col-sm-offset-3">
                <button type="submit" class="button solid-button purple">Send Message</button>
              </div>
              <!-- end .col-sm-9 -->
            </div>
            <!-- end .form-group -->
            <div class="contact-loading alert alert-info form-alert">
              <span class="message">Loading...</span>
              <button type="button" class="close" data-hide="alert" aria-label="Close"><i class="fa fa-times"></i></button>
            </div>
            <div class="contact-success alert alert-success form-alert">
              <span class="message">Success!</span>
              <button type="button" class="close" data-hide="alert" aria-label="Close"><i class="fa fa-times"></i></button>
            </div>
            <div class="contact-error alert alert-danger form-alert">
              <span class="message">Error!</span>
              <button type="button" class="close" data-hide="alert" aria-label="Close"><i class="fa fa-times"></i></button>
            </div>
          </form>
          <!-- end contact-form -->
        </div>
        <!-- end .slide-out-widget -->
        <div class="slide-out-widget">
          <h4>Follow On Instagram</h4>
          <div class="instagram">
          </div>
          <!-- end .instagram -->
        </div>
        <!-- end .slide-out-widget -->
      </div>
      <!-- end .slide-out-widgets -->
    </div>
    <!-- end .slide-out -->
    <!-- Header -->
    <header class="header">
      <div class="top clearfix">
        <a href="#section8" class="available"><i class="ion-ios-email-outline"></i><span>Available For Freelance</span></a>
        <div class="right-icons">
          <a href="" class="open-search header-open-search"><i class="md md-search"></i></a>
          <a href="" class="download"><i class="md md-file-download"></i></a>
          <a href="" class="share"><i class="md md-more-vert"></i></a>
        </div>
        <!-- end .right-icons -->
        <!-- Popup -->
        <div class="popup">
          <nav class="social-nav">
            <ul class="list-unstyled">
              <li><a href="">Facebook</a></li>
              <li><a href="">Twitter</a></li>
              <li><a href="">Linkedin</a></li>
              <li><a href="">Google+</a></li>
              <li><a href="">Behance</a></li>
            </ul>
            <!-- end .list-unstyled -->
          </nav>
          <!-- end .social-nav -->
        </div>
        <!-- end .popup -->
      </div>
      <!-- end .top -->
      <div class="bottom clearfix">
        <div class="title"><a href="/">Mayank</a></div>
        <div class="header-action-button-wrapper">
          <a href="" class="header-action-button action-button"><i class="md md-add"></i></a>
        </div>
        <!-- end .header-action-button-wrapper -->
        <a href="" class="responsive-menu-open">Menu <i class="fa fa-bars"></i></a>
        <nav class="main-nav">
          <ul class="list-unstyled">
            <li class="active"><a href="/">Home</a></li>
            <li><a href="/about">About</a></li>
          </ul>
        </nav>
        <!-- end .main-nav -->
      </div>
      <!-- end .bottom -->
    </header>
    <!-- end .header -->
    <div class="responsive-menu">
      <a href="" class="responsive-menu-close">Close <i class="ion-android-close"></i></a>
      <nav class="responsive-nav"></nav>
      <!-- end .responsive-nav -->
    </div>
    <!-- end .responsive-menu -->
    <!-- Sections -->
    <div class="sections content-study">
    <div class="sections-wrapper clearfix">
      <!--Single Blog Post -->
      <section>
        <div class="container">
          <div class="single-blog-post">
            <header class="blog-header clearfix">
              <div class="content">
                <span class="date">March 11, 2015</span>
                <h4 style="font-size: 12px">Hoisting in JavaScript</h4>
                                  <div>
                    <h6>Other Related JavaScript Articles:</h6>
                    <p class="other-articles">
                        <a href="/javascript-what-is-immediately-invokable-function-expressions-iife-singleton-design-pattern">
                          IIFE Pattern
                        </a>
                    </p>
                    <p class="other-articles">
                        <a href="/javascript-module-pattern-design-singleton">
                          Module Pattern in JavaScript
                        </a>
                    </p>
                    <p class="other-articles">
                        <a href="/singleton-design-pattern-javascript-module">
                          Singleton Pattern In JavaScript
                        </a>
                    </p>
                    <p class="other-articles">
                        <a href="/scopes">
                          Scopes in JavaScript
                        </a>
                    </p>
                    <p class="other-articles">
                        <a href="/create-javascript-object-string-literal-new-keyword-new-object">
                          Creating Object In JavaScript
                        </a>
                    </p>
                    <p class="other-articles">
                        <a href="/function-and-variable-hoisting-javascript-closures">
                          Hoisting in JavaScript
                        </a>
                    </p>
                    <p class="other-articles">
                        <a href="/prototype-pattern-javascript-function-prototype">
                          Prototype Pattern JavaScript
                        </a>
                    </p>
                  </div>
              </div>
              <!-- end .content -->
              <div class="image" style="background-image: url('images/javascript-logo-large.jpg');"></div>
            </header>
            <!-- end .blog-header -->
            <div class="blog-post">
              <div class="blog-post-content">
                <h1 class="heading">Function and Variable Hoisting</h1>
                <p>The article shall give an overview of "<b>Variable and Function Hoisting Concepts".</b></p><br>
                <p>Making Variable and Functions available even before its Declaration is called <b>Hoisting</b>.</p><br>
                <p>Both Functions and Variables can be <b>Hoisted</b>.</p>
                <p><br></p>
                <b>The Article shall help you understand the following Concepts:</b><br><br>
                <p>1. Difference between <b>Variable Declaration and Variable Definition</b></p>
                <p>2. What is <b>Variable Hoisting. </b></p>
                <p>3. Difference between <b>Function Expressions and Function Expressions</b></p>
                <p>4. What is <b>Function Hoisting. </b></p>
                <p>5. Why <b>Function Expressions</b> are not Hoisted.</p>
                <p>6. <b>Order of</b> Variable and Function Hoisting.</p>
                <p><br></p>
                <p>We shall cover all the topics in detail, so that we could have clear understanding of all these concepts.</p>
                <p><br></p>
                <h2 class="topic">Variable Declaration and Definition:</h2>
                <p>We need to understand the concept of <b>Variable Declaration and Definition</b> to understand Hoisting.</p>
                <p><br></p>
                <p><b>Lets consider the following piece of code:</b></p>
                <pre>
<code class="lang-javascript">
console.log(Employee);</code></pre>
                <p></p>
                <p>In the above code we have not provided any Declaration and Definition for the variable "Employee". </p><br>
                <p>Therefore, if the variable is accessed, "ReferenceError: Employee is not defined" error shall appear. </p><br>
                <p>This simply means that:</p>
                <p>1. JavaScript compiler has no idea about any implementation of variable "Employee". </p>
                <p>2. When the variable is encountered in the code it cannot find any reference to the specified variable.</p>
                <p>3. Since no reference can be found, it returns "Null Reference Error".</p>
                <p><br></p>
                <p>Lets look into details of Declaration and Definition in order to understand Hoisting in Detail.</p>
                <p><br></p>
                <h2 class="topic">Variable Declaration:</h2>
                <pre>
<code class="lang-javascript">
var Employee;</code></pre>
                <p>This is a simple Variable Declaration.</p><br>
                <p>Variable declaration simply signifies that a variable with name "Employee" is containing a reference.</p>
                <p>This declared variable shall be accessed shortly. Therefore JavaScript creates a reference for the same.</p>
                <p>Although in the above declaration, we are not providing any value to the variable.</p>
                <p><br></p>
                <pre>
<code class="lang-javascript">
console.log(Employee);

// output: undefined</code></pre>
                <p>In above code the variable is declared without any value assigned to it.</p>
                <p>Since we dont have any value assigned, <b>an implicit value "undefined"</b> shall be assigned to it.</p>
                <p>The value "<b>undefined</b>" shall signify that we still <b>need to define / initialize the value of variable</b>.</p>
                <p><br></p>
                <p><b>**Note: we will shortly examine case where Declaration and Definition shall be provided in same line.</b></p>
                <p><br></p>
                <h2 class="topic">Variable Definition / Initialization:</h2>
                <p>Variable Definition is assignment of a value to a variable.</p>
                <pre>
<code class="lang-javascript">
var Employee; // Variable Declaration

Employee = "Mayank"; // Variable Definition

console.log(Employee); //output: Mayank
</code></pre>
                <p><b>Variable Definition </b>gives value to the variable. </p><br>
                <p>The variable Reference is now assigned some value instead of "undefined"</p>
                <p><br></p>
                <pre>
<code class="lang-javascript">
var Employee = "Mayank";

console.log(Employee); //output: Mayank
</code></pre>
                <p>In the above code, Declaration and Definition of the variable is provided in a single line of code.</p>
                <p><br></p>
                <p>Now since we have understanding of Function Declaration and Definition, we can now move to Hoisting.</p>
                <p><br></p>
                <h2 class="topic">Variable Hoisting</h2>
                <pre>
<code class="lang-javascript">
console.log(Employee);

var Employee = "Mayank"; </code></pre>
                <div>In the above code the variable "Employee" is refered even before it is initialized.</div>
                <p><br></p>
                <h2 class="topic">What output do you expect ?</h2>
                <p>If you are not aware of Hoisting Concepts, we would expect that ouput shall be "Null Reference Exception".</p><br>
                <p>Since there is no prior reference to "Employee" Object when compiler tries to run Line 1</p>
                <p><br></p>
                <p>But lets see what is the output of the program:  </p>
                <pre>
<code class="lang-javascript">
console.log(Employee); // Output: undefined

var Employee = "Mayank";</code></pre>
                <p>Here we can see that the output is "<b>Undefined</b>", rather we expected it to be a "<b>Reference Error".</b></p>
                <p><br></p>
                <h2 class="topic">Why "Undefined" instead of "Reference Error" ?</h2>
                <p>The reason why the output is "<b>Undefined</b>" is because of <b>Variable Hoising.</b></p><br>
                <p><b>Variable Hoisting </b>shall move the Variable Declaration to the top of the execing function.</p><br>
                <p>Since the variable declaration is moved to the top, it is assigned a value <b>"undefined"</b></p>
                <p>Hoisting the declaration on the top makes it available to be accessed, even before the variable is declared.</p>
                <p><br></p>
                <p><b>**Note:</b> Only Function declaration moves to the top, Declaration shall still remain at the same place.</p>
                <p><b>**</b> Also if Declaration is moved to the top, variable is assigned the value at "undefined"</p>
                <p><br></p>
                <p><b>The above function call is equivalant to:</b></p>
                <pre>
<code class="lang-javascript">
var Employee;

console.log(Employee); // Output: undefined

Employee = "Mayank";</code></pre>
                <p>Here the Hoisting is moved to the top of the function.</p>
                <p>Therefore when we display the output, it displays: "undefined" rather than giving a "Reference Error".</p>
                <p><br></p>
                <b>** Only Variable Declaration are Hoisted</b>
                <p>It is important to note that only variable declaration moves to the top and not variable declaration.</p>
                <p>Lets understand this with an Example:</p>
                <pre>
<code class="lang-javascript">
console.log(Employee);

var Employee = "Mayank";

console.log(Employee);</code></pre>
                <p>Here we can see that the variable is declared and defined in the same line of code. </p>
                <p><br></p>
                <p><b>What output do you expect in this case ?</b></p>
                <p>Since now we know that the variable are hoisted, so "reference Error" shall not be encountered.</p>
                <p>So what output do you expect: <b>"undefined"</b> or <b>"Mayank". </b>Lets see the output</p>
                <p>The above code id equivalent to the following code after Hoisting:</p>
                <pre>
<code class="lang-javascript">
Line 1: var Employee;

Line 2: console.log(Employee); // output: undefined

Line 3: Employee = "Mayank";

Line 4: console.log(Employee); // output: Mayank</code></pre>
                <p><br></p>
                <p>As stated earlier, only the variable declaration is hoisted, variable definition is not Hoisted. </p>
                <p>Therefore the variable Definition shall still remain at the same place, but the declaration shall be Hoisted.</p>
                <p><br></p>
                <p>We can derive following Conclusions from the above Discussion:</p>
                <p>1. Since the variables are Hoisted, Line 2 didnt encountered any Reference Error.</p>
                <p>2. The Variable is Hoisted on the top and it is assigned the value "undefined"</p>
                <p>3. Function shall output "undefined" at Line 2</p>
                <p>4. Variable Declaration shall still remain at Line 3. So the value <b>"Mayank"</b> is assigned instead of "<b>undefined"</b></p>
                <p><br></p>
                <p>This is how <b>Variable Hoisting</b> takes place inside JavaScript</p>
                <p><br></p>
                <h2 class="topic">Now lets move to the implementation of Function Hoisting</h2>
                <h3 class="subtopic"><b>Function Definition and Function Expressions:</b></h3>
                <p>In  order to understand the concept of function Hoisting, we need to first understand the following:</p>
                <p>1. Function Expression</p>
                <p>2. Function Declaration</p>
                <p><br></p>
                <h4>Function Definition:</h4>
                <p>Lets look at a very simple "Function Definition":</p>
                <pre>
<code class="lang-javascript">
function demoFunction(){

  alert("This is the function Definition");

}</code></pre>
                <p>So the simplest way to understand "Function Declaration" is that, it starts with "<b>function</b>" keyword.</p>
                <p>The benefit of Function Definition is that they are <b>"Hoisted"</b> by the JavaScript Compiler.</p>
                <p>Functions are automatically Hoisted on the Top of the scope by the compiler, hence making it available to be called, even before it is declared.</p>
                <p>This can be understood by this small example:</p>
                <pre>
<code class="lang-javascript">
demoFunction();

function demoFunction(){

  alert("Function is already Hoisted");

}</code></pre>
                <p>Here the function definition "demoFunction" is hoisted at the top by default, making it available to the user to be called even before the Declaration of the Function.</p>
                <p>The above piece of code is equivalent to:</p>
                <pre>
<code class="lang-javascript">
function demoFunction(){

  alert("Function is already Hoisted");

}

demoFunction();
</code></pre>
                <p><br></p>
                <h4>Function Expressions:</h4>
                <p>"<b>Function Expression"</b> would be any function defined which does start "function" keyword.</p>
                <p>Another way to define a function expression is to assign a function to a variable. </p>
                <p>This is another common way to create a function apart from the "Function Declaration" Syntax above.</p>
                <pre>
<code class="lang-javascript">
var demoFunction = function(){

  alert("This is function Expression");

};
</code></pre>
                <p>Since the above function does start the keyword "function", its a <b>"Function Expression"</b></p>
                <p>The above code assigns a function definition to a variable "demoFunction". </p>
                <p>This would mean that the variable <b>"demoFunction"</b> shall now represent a function definition.</p>
                <p>The function can now be called using following line of code: <b>"demoFunction()"</b></p>
                <p><br></p>
                <p><b>Another example of Function Expression is an IIFE:</b></p>
                <pre>
<code class="lang-javascript">
(function(){

  alert("This is function Expression");

})();
</code></pre>
                <p>Here also, we can see that the line of code does not start with "function" keyword, therefore its a expression.</p>
                <p><br></p>
                <h2 class="topic">Function Hoisting:</h2>
                <p>Now, since we are familier with the Function Expressions and Function Declaration, lets understand <b>"Hoisting".</b></p><br>
                <p><b>Function Hoisting</b> is a concept where just like variables, functions are Hoisted on the top of the Scope.</p><br>
                <p><b>Any function Declaration is Hoisted on the top of the Scope.</b></p><br>
                <p>This can be understood by this small example:</p>
                <pre>
<code class="lang-javascript">
demoFunction();

function demoFunction(){

  alert("Function is already Hoisted");

}</code></pre>
                <p>The function Declaration shall be Hoisted on the top.</p>
                <p>The above piece of code is equivalent to:</p>
                <pre>
<code class="lang-javascript">
function demoFunction(){

  alert("Function is already Hoisted");

}

demoFunction();
</code></pre>
                <p><br></p>
                <p><b>** Note: The Hoisting takes place only for Function Declarations. Function Expressions are not Hoisted.</b></p>
                <p><br></p>
                <h4><b>Why Function Expression are Not Hoisted ?</b></h4>
                <p>Now since we are familier with the basic concept of Variable and Funation Hoisting, lets evaluate how compiler evaluates a simple function Expression.</p>
                <p>Lets consider the following Example:</p>
                <pre>
<code class="lang-javascript">
demoFunction();

var DemoFunction = function(){

  alert("Function is already Hoisted");

}
</code></pre>
                <p>In the above code, we have a simple function Expression, function is called before the DemoFunction is declared.</p>
                <p><br></p>
                <p><b>Lets see how this code is Hoisted</b></p>
                <pre>
<code class="lang-javascript">
var demoFunction;

demoFunction();

demoFunction = function(){

  alert("Function is already Hoisted");

}
</code></pre>
                <p>We can derive following results from the above Example:</p>
                <p>1. The above Example can be seen as an example of Variable Hoisting</p>
                <p>2. Variable "demoFunction" is assigned a function expression.</p>
                <p>3. In this case variable "demoFunction" shall be hoisted on the top instead of function expression.</p>
                <p>4. Since the variable is hoisted and not the function, we cannot access the function Expression</p>
                <p><br></p>
                <h2 class="topic">Conclusion:</h2>
                <p>Important Concepts to remember are:</p>
                <p><b>1. Variables are Hoisted at the Top of the Function</b></p>
                <p><b>2. Hoisted Variable shall take "undefined" as it value</b></p>
                <p><b>3. Variable Definition shall not be Hoisted (only Declaration)</b></p>
                <p><b>4. Function Definitions are Hoisted.</b></p>
                <p><b>5. Function Expressions shall not be hoisted.</b></p>
                <p><b>6. If we want functions to be Hoisted, use function Declaration instead of Function Expression.</b></p>
                <p><br></p>
                <p><br></p>
                <p><br></p>
                <p><br></p>
                <p><br></p>
              </div>
              <!-- end .blog-post -->

              <!-- end .blog-details -->
            </div>
            <!-- end .single-blog-post -->
          </div>
        </div>
          <!-- end .container -->
      </section>
      </div> <!-- end .sections-wrapper -->
    </div>
    <!-- end .sections -->
    <!-- Footer -->
    <footer class="footer">
      <div class="top">
        <div class="container">
          <div class="row">
            <div class="col-sm-4">
              <h4>Address</h4>
              <p>A-8, Milansar Appartment, Rohini<br />Delhi, India</p>
            </div>
            <!-- end .col-sm-4 -->
            <div class="col-sm-4">
              <h4>Connect</h4>
              <div class="social-icons">
                <a href="" class="social-icon"><i class="fa fa-facebook"></i></a>
                <a href="" class="social-icon"><i class="fa fa-twitter"></i></a>
                <a href="" class="social-icon"><i class="fa fa-google-plus"></i></a>
                <a href="" class="social-icon"><i class="fa fa-behance"></i></a>
                <a href="" class="social-icon"><i class="fa fa-dribbble"></i></a>
              </div>
              <!-- end .social-icons -->
            </div>
            <!-- end .col-sm-4 -->
            <div class="col-sm-4">
              <h4>Contact</h4>
              <p>Tel: +91 9711083089<br />Mail: mayankgupta688@gmail.com</p>
            </div>
            <!-- end .col-sm-4 -->
          </div>
          <!-- end .row -->
        </div>
        <!-- end .container -->
      </div>
      <!-- end .footer -->
      <div class="bottom">Copyright &copy; Sility. All Rights Reserved.</div>
      <!-- end .bottom -->
    </footer>
    <script async src="js/analytics.js"></script>
  </body>
</html>
