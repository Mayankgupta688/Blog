@html.extend('layout', function(model) {


  @html.block("header", function(model) {
    <title>JavaScript Delete Function</title>
    <meta content="Delete Function in JavaScript" name="title" />
    <link rel="canonical" href="http://learn-javascript.in/javascript-scopes-function-scope-global-scope" />
    <meta name="title" content="JavaScript Delete Function. Delete Object and Properties" />
    <meta name="description" content="Delete Keyword is used to delete Objects anf Properties inside an Object. In this article, we shall be disscussing about using Delete in JavaScript." />
    <meta name="keywords" content="delete keyword,delete object in javascript, delete properties, delete strict mode, delete array element"/>
  });

  @html.block("body", function(model) {

  <div class="blog-post-content">
  <h1 class="heading">Prototype Pattern in JavaScript</h1>
  <p><b>Prototype Pattern</b> in used to Create multiple Objects from a Constructor Function. Constructor function shall contain set of related functionalities and properties. these functionalities and properties can also be added to Prototype Property of the Constructor Function, this shall ensure that the properties and function are shared amongst all the Objects created out of it. We shall be understanding all these concepts in Details.</p>
  <br>
  <p>In the following article, we would build our understanding regarding ProtoType Pattern.</p>
  <br>
  <b>The article shall be focussed around 2 basic Concepts:</b><br><br>
  <p>1. JavaScript Constructor Function</p>
  <p>2. Prototype Keyword.</p>
  <br>
  <b>We would cover the following Topic:</b><br><br>
  <p>1. JavaScript Constructor Function</p>
  <p>2. Creating Object from Constructor Function</p>
  <p>3. Understanding Prototype property</p>
  <p>4. Prototype Pattern Implementation</p>
  <p>5. Private Properties in Prototype Pattern</p>
  <p><br></p>
  <h2 class="topic">What is a Constructor Function</h2>
  <p>Constructor function can be used to create Multiple Objects. Creating Objects from Constructor Function shall ensure that the properties and function defined by the Constructor Function shall be available to all the Objects created from it.</p>
  <br>
  <b>Lets assume a scenerio for the same:</b><br><br>
  <p>1. There is a company with a certain Employee Strength</p>
  <p>2. The Employee Details shall contain the basic information about Name, Age and Designation.</p>
  <p>3. Company need to add the details of all the Employee</p>
  <p><br></p>
  <b>Lets create constructor function for the same scenerio:</b>
  <pre>
<code class="lang-javascript">
function Employee (name, age, designation) {

  this.Name = name;

  this.Age = age;

  this.Designation = designation;

}

</code></pre>
  <p>This is a simple Implementation of the Consructor Function. </p>
  <br>
  <p>Creating Constructor Function for the same shall ensure that the properties defined on the "this" keyword shall be available to all the Objects which are created using this Constructor function.It act as a building block to create multiple instances of same type. Every Object shall contain following properties "Name", "Age" and "Designation".All these variables shall act as a public member to the created Object.</p>
  <p><br></p>
  <p>For those who belong to language like Java and C#, a constructor function shall resembel to a "Class".</p>
  <br>
  <p>We can create Objects from Constructor function just as we create Objects from Classes.</p>
  <p><br></p>
  <b>We can even add functions to the constructor function:</b>
  <pre>
<code class="lang-javascript">
function Employee (name, age, designation) {

  this.Name = name;

  this.Age = age;

  this.Designation = designation;

  this.showDetails = function() [

    console.log("Age: " + this.Age + " Name: " + this.Name);

  }

}</code></pre>
  <p>The added function will be available to each of the Object created. </p>
  <p><br></p>
  <h2 class="topic">Creating Object from Constructor Function</h2>
  <p>Lets create a Object from a Constructor Function.</p>
  <pre>
<code class="lang-javascript">
var newEmployee = new Employee("Mayank", 28, "Senior Software Developer");

console.log(newEmployee.Name);

</code></pre>
  <p>In the above code, we can use "new" keyword to create Object from Constructor Function. The new Object created shall contain all the properties which were bound to "this" keyword. We can pass parameter to constructor function, which will assign these values to the Object properties.</p>
  <p><br></p>
  <b>We can access the properties of the New Object in the following manner</b><br>
  <p>1. newEmployee.Name</p>
  <p>2. newEmployee["Age"]</p>
  <p><br></p>
  <b>Lets see what "New Keyword" does while creating a new Object.</b><br>
  <p>1. Create a new scope in the memory</p>
  <p>2. Bind variables to the new scope</p>
  <p>3. Refer to the newly created scope by "this"</p>
  <p>4. Return "this" Object from the constructor function.</p>
  <p><br></p>
  <h2 class="topic">Prototype Keyword in JavaScript</h2>
  <b>Lets evaluate the problem with above code:</b>
  <pre>
<code class="lang-javascript">
function Employee (name, age, designation) {

  this.Name = name;

  this.Age = age;

  this.Designation = designation;

  this.showDetails = function() [

    console.log("Age: " + this.Age + " Name: " + this.Name);

  }

}</code></pre>
  <p><br></p>
  <p>In the above code, we are adding function to the "Employee" Object.</p>
  <br>
  <b>So from the architectural point of view, lets consider the following points:</b><br><br>
  <p>1. Function do not store any state for the Object.</p>
  <p>2. When a new Object is created using "new", seperate memory space is allocated for each function</p>
  <p>3. Since function implementation is same for all Object, it can be shared between them</p>
  <p>4. Sharing the function definition shall reduce the memory required for each Object</p>
  <p><br></p>
  <p>So, inorder to achieve the above specified results, we can use the "<b>Prototype</b>" property of constructor function.</p>
  <p><br></p>
  <h2><b>Understanding Prototype property</b></h2>
  <p>Each constructor function created contains a "Prototype" property.</p>
  <br>
  <p>Prototype Property can be refered using: <b>"Employee.prototype"</b></p>
  <p><br></p>
  <b>Using Prototype Object:</b><br><br>
  <p>Here we would see that the Properties and Functionality added to the Employee Constructor function shall be added as a shared piece of information, shared between the different instances created using "new" keyword.</p>
  <p><br></p>
  <p>Lets see with an Example</p>
  <pre>
<code class="lang-javascript">
function Employee (name, age, designation) {

  this.Name = name;

  this.Age = age;

  this.Designation = designation;

}

Employee.prototype.showDetails = function() { .. }

var EmployeeOne = new Employee("Mayank", 28, "Developer");

var EmployeeTwwo = new Employee("Mayank", 28, "Developer");

EmployeeOne.showDetails()

EmployeeTwo.showDetails()

</code></pre>
  <p><br></p>
  <p>Since the function "showDetails" is added to the "prototype" property of the constructor object, we will have access to the specified function in all the Objects created from Constructor Function.</p>
  <p><br></p>
  <b>The advantage of using Prototype are:</b><br><br>
  <p>1. The variables and functions are shared between the Objects</p>
  <p>2. Every Object shall not have implementation of same function or variable</p>
  <p>3. Memory is shared between the Objects hence less utilisation</p>
  <p><br></p>
  <h2><b>Prototype Pattern Implementation</b></h2>
  <p>Lets see the implementation of the Prototype Pattern:</p>
  <pre>
<code class="lang-javascript">

// Defining a Constructor Function

function Employee (name, age, designation) {

  this.Name = name;

  this.Age = age;

  this.Designation = designation;

}


// Adding Functions to Prototype Object

Employee.prototype.showDetails = function() { ... }

Employee.prototype.showName = function() { ... }

Employee.prototype.showDesignation = function() { ... }


// Creating Objects from Prototype Property

var myEmployee = new Employee("Mayank", 28, "Developer");

var myEmployeeOne = new Employee("Mayank", 28, "Developer");

var myEmployeeTwo = new Employee("Mayank", 28, "Developer");


// Accessing Prototype functions from Objects

myEmployee.showName()

myEmployeeOne.showName()

myEmployeeTwo.showName()

</code></pre>
  <p><br></p>
  <p>Following are the points to be considered in above implementation:</p>
  <br>
  <p>1. "showDetails", "showName" is added top the prototype property of Employee</p>
  <p>2. These functions shall be shared between the Objects created using "Constructor Function"</p>
  <p><br></p>
  <h2 class="topic">Private Properties in Prototype Pattern</h2>
  <p><b>Lets consider the following scenerio:</b></p>
  <p>We have created a new variable "otherInfo" inside th constructor function.</p>
  <p>This variable is private to the "Employee" Constructor Function.</p>
  <p>Private variables cannot be accessed inside the Prototype Object.</p>
  <pre>
<code class="lang-javascript">
function Employee (name, age, designation) {

  var otherInfo = "Some Data";

  this.Name = name;

  this.Age = age;

  this.Designation = designation;

}

Employee.prototype.showDetails = function() {

  console.log(otherInfo);  // This variable cannot be accessed

}

</code></pre>
  <p><br></p>
  <p>All the variables private to the "Constructor" function is not accessible inside the prototype Object</p>
  <p>Variables should be added to the "this" reference in order to refer it via prototype function.</p>
  <p><br></p>
  <h2><b>More References to Prototype Pattern:</b></h2>
  <a href="http://www.dofactory.com/javascript/prototype-design-pattern">http://www.dofactory.com/javascript/prototype-design-pattern</a><br>
  <a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/">https://addyosmani.com/resources/essentialjsdesignpatterns/book/</a><br>
  <a href="https://scotch.io/bar-talk/4-javascript-design-patterns-you-should-know">https://scotch.io/bar-talk/4-javascript-design-patterns-you-should-know</a>
  <p><br></p>
  <p><br></p>
</div>


  });

});